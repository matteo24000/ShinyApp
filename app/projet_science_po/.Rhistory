plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=16, cex=0.9)
legend("topright", inset = c(-0.2,1), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright", inset = c(-0.2,1), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright", inset = c(-0.2,0.6), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
runApp()
box(legend("topright", inset = c(-0.2,0.6), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9))
runApp()
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright", inset = c(0.1,.0.1), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright", inset = c(0.1,0.1), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
runApp()
shiny::runApp()
runApp()
library(leaflet.minicharts)
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rjson)
#install.packages("leaflet")
#install.packages("magrittr")
#install.packages("cartography")
#install.packages("rnaturalearth")
#install.packages("tmap")
install.packages("rjson")
library(rjson)
runApp()
runApp()
runApp()
library(highcharter)
#install.packages("leaflet")
#install.packages("magrittr")
#install.packages("cartography")
#install.packages("rnaturalearth")
#install.packages("tmap")
#install.packages("rjson")
install.packages("highcharter")
library(highcharter)
library(dplyr)
runApp()
runApp()
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
runApp()
#install.packages("leaflet")
#install.packages("magrittr")
#install.packages("cartography")
#install.packages("rnaturalearth")
#install.packages("tmap")
#install.packages("rjson")
#install.packages("highcharter")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
#install.packages("leaflet")
#install.packages("magrittr")
#install.packages("cartography")
#install.packages("rnaturalearth")
#install.packages("tmap")
#install.packages("rjson")
#install.packages("highcharter")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
library(rnaturalearth)
runApp()
runApp()
runApp()
library(raster)
runApp()
View(df)
runApp()
runApp()
runApp()
adm_fr <- getData('GADM', country='FRA', level=1)
plot(adm_fr)
library(raster)
adm_fr <- getData('GADM', country='FRA', level=2)
plot(adm_fr)
bbox(adm_fr) # Dimensions de la carte
adm_fr <- getData()
adm_fr$NAME_1
adm_fr$NAME_2
pos = locator(1)
scalebar(d = 200, xy = c(pos$x,pos$y), type = "bar", below = "km",lwd = 5,
divs = 2, col = "black", cex = 1, lonlat = T)
#On charge les donn?es
data <- read.csv2(file.choose(), header=TRUE, sep=",")
admis <- c()
for (i in adm_fr$NAME_2) {
Inscrits <- df$Inscrits[df$départements == i]
admis <- c(Inscrits)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
Inscrits <- df$Inscrits[df$départements == i]
admis <- c(Inscrits)
}
admis <- c()
i=1
for (i in adm_fr$NAME_2) {
Inscrits <- df$Inscrits[df$départements == i]
admis <- c(Inscrits)
}
df <- data_frame(df)
for (i in adm_fr$NAME_2) {
Inscrits <- data$Inscrits[data$départements == i]
admis <- c(Inscrits)
}
admis
data_bis <- data.matrix(na.omit(data))
for (i in adm_fr$NAME_2) {
Inscrits <- data$Inscrits[data$départements == i]
admis <- c(Inscrits)
}
admis
admis
admis <- c()
for (i in adm_fr$NAME_2) {
Inscrits <- data$Inscrits[data$départements == i]
admis <- c(Inscrits)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Inscrits[data$départements == i]
temp <- data$Votants[data$département == temp_academie]
admis <- c(admis,temp)
}
admis
install.packages("openxlsx") # Installe de quoi ouvrir un fichier excel
install.packages("openxlsx")
crpe <- read.xlsx(file.choose()) # Ex 17
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Inscrits[data$départements == i]
temp <- data$Votants[data$département == temp_academie]
admis <- c(admis,temp)
}
admis
data_bis <- data.matrix(na.omit(data))
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data_bis[data_bis$départements == i]
temp <- data$Votants[data$département == temp_academie]
admis <- c(admis,temp)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data_bis$départements == i
temp <- data$Votants[data$département == temp_academie]
admis <- c(admis,temp)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data_bis['départements'] == i
temp <- data$Votants[data$département == temp_academie]
admis <- c(admis,temp)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data_bis['départements'] == i
admis <- c(temp_academie)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data_bis['départements'] == i
}
temp_academie
# Coloriser proportionnellement aux nombres d'admis.
n= 10 # nombre de niveaux souhait?s
## Niveaux de couleurs : j'utilise la fonction cut
niveaux <- cut(data_bis$Inscrits, n, label = FALSE)
##  d?grad? avec heat.colors
colors <- rev(heat.colors(n))
colorRampPalette()
couleurs <- colors[as.numeric(niveaux)]
plot(adm_fr,col=couleurs)
## Niveaux de couleurs : j'utilise la fonction cut
niveaux <- cut(data_bis['Inscrits'], n, label = FALSE)
View(data)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.département[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
data <- na.omit(data)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.département[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
data <- na.omit(data)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
# Coloriser proportionnellement aux nombres d'admis.
n= 10 # nombre de niveaux souhait?s
## Niveaux de couleurs : j'utilise la fonction cut
niveaux <- cut(admis, n, label = FALSE)
##  d?grad? avec heat.colors
colors <- rev(heat.colors(n))
colorRampPalette()
couleurs <- colors[as.numeric(niveaux)]
plot(adm_fr,col=couleurs)
setdiff(data$dÃ.partement, adm_fr$NAME_2)
data <- na.omit(data)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
setdiff( adm_fr$NAME_2,data$dÃ.partement)
data <- na.omit(data)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
data <- na.omit(data)
admis <- c()
for (i in length(adm_fr$NAME_2)) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
View(admis)
admis
data <- na.omit(data)
admis <- c()
for (i in length(adm_fr$NAME_2)) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
i+1
}
admis
View(admis)
data <- na.omit(data)
admis <- c()
i=0
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
i+1
}
admis
View(admis)
admis <- c()
for (i in adm_fr$NAME_2[i]) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
View(admis)
#On charge les donn?es
data <- read.csv2(file.choose(), header=TRUE, sep=",")
admis <- c()
for (i in adm_fr$NAME_2[i]) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
View(admis)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement == temp_academie]
admis <- c(admis,temp)
}
admis
View(admis)
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement]
admis <- c(admis,temp)
}
admis
# Coloriser proportionnellement aux nombres d'admis.
n= 10 # nombre de niveaux souhait?s
## Niveaux de couleurs : j'utilise la fonction cut
niveaux <- cut(admis, n, label = FALSE)
##  d?grad? avec heat.colors
colors <- rev(heat.colors(n))
colorRampPalette()
couleurs <- colors[as.numeric(niveaux)]
plot(adm_fr,col=couleurs)
# Coloriser proportionnellement aux nombres d'admis.
n <- 10 # nombre de niveaux souhait?s
## Niveaux de couleurs : j'utilise la fonction cut
niveaux <- cut(admis, n, label = FALSE)
##  d?grad? avec heat.colors
colors <- rev(heat.colors(n))
colorRampPalette()
couleurs <- colors[as.numeric(niveaux)]
plot(adm_fr,col=couleurs)
colors <- rev(heat.colors(n))
colorRampPalette()
plot(adm_fr,col=couleurs)
plot(adm_fr,col='red')
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$Code.dÃ.partement]
admis <- c(admis,temp)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp_academie <- data$Code.dÃ.partement[data$dÃ.partement == i]
temp <- data$Inscrits[data$dÃ.partement]
admis <- c(admis,temp)
}
admis
admis <- c()
for (i in adm_fr$NAME_2) {
temp <- data$Inscrits[data$dÃ.partement]
admis <- temp
}
admis
plot(admis)
plot(admis$Inscrits~admis$dÃ.partement)
View(data)
colnames(admis)
colnames(data)
plot(data$Inscrits~data$dÃ.partement)
plot(data$Inscrits~data$Votants)
runApp()
nrow(data)
ncol(data)
runApp()
data_bis <- data.matrix(na.omit(data))
data_bis <- data.matrix(na.omit(data))
acp <- prcomp(data_bis[,1:24])
names(acp)
head(acp$x)
#On visualise les données graphiquement
plot(acp$x[,1],acp$x[,2], pch=16)
text(acp$x[,1],acp$x[,2], rownames(data_bis), cex=0.8)
KM <- kmeans(data_bis[,1:24], center=4)
names(KM)
names(acp)
# Pour obtenir une description de l'objet ainsi créé
summary(KM)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright", inset = c(0.1,0.1), legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright",legend=colnames(data_bis[,9:24]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright",legend=colnames(data_bis[,1:ncol(data)]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright",legend=colnames(data_bis[,data_bis$Blancs.et.nuls:ncol(data)]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright",legend=colnames(data_bis[,data_bis['Blancs.et.nuls']:ncol(data)]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright",legend=colnames(data_bis[,'Blancs.et.nuls':ncol(data)]),
col=KM$centers, pch = KM$cluster, cex=0.9)
#On fait un plot pour visualiser les données du Kmeans
plot(acp$x[,1], acp$x[,2] ,pch=KM$cluster, col=KM$centers, cex=1.5)
points(KM$centers,col=KM$centers, pch=10, cex=0.9)
legend("topright",legend=colnames(data_bis[,1:ncol(data)]),
col=KM$centers, pch = KM$cluster, cex=0.9)
runApp()
adm_fr <- getData('GADM', country='FRA', level=2)
plot(adm_fr)
bbox(adm_fr) # Dimensions de la carte
adm_fr <- getData()
adm_fr$NAME_2 #Départements
pos = locator(1)
library(raster)
adm_fr <- getData('GADM', country='FRA', level=2)
plot(adm_fr)
bbox(adm_fr) # Dimensions de la carte
pos = locator(1)
library(leaflet)
shiny::runApp()
library(raster)
runApp()
runApp()
adm_fr$NAME_2
runApp()
View(data)
runApp()
runApp()
library(vioplot)
#install.packages("leaflet")
#install.packages("magrittr")
#install.packages("cartography")
#install.packages("rnaturalearth")
#install.packages("tmap")
#install.packages("rjson")
#install.packages("highcharter")
#install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
install.packages("vioplot")
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rvest)
library(stringr)
library(readxl)
library(tidyverse)
library(DBI)
library(RSQLite)
#Web scrapping sur la page web data.gouv
page_web <- read_html("https://www.data.gouv.fr/fr/posts/les-donnees-des-elections/")
fichiers.xls <- page_web %>% html_nodes("li > a ") %>% html_attr("href") %>% str_subset("\\.xls")
liens_xls <- data.frame(fichiers.xls)
colnames(liens_xls) <- "Fichiers XLS du site Data.gouv"
View(liens_xls)
#On va creer un fichier csv qui rassemble tous les liens xls de la page web.
#Je conseil de l'ouvrir avec NotePad++ qui permet d'avoir les liens clickables.
write.csv2(liens_xls, file="C:/Users/lebriat/Downloads/liens_xls_page_web", row.names = FALSE)
fichiers.csv <- page_web %>% html_nodes("li > a ") %>% html_attr("href") %>% str_subset("\\.csv")
liens_csv <- data.frame(fichiers.csv)
colnames(liens_csv) <- "Fichiers CSV du site Data.gouv"
View(liens_csv)
#On va creer un fichier csv qui rassemble tous les liens xls et xlsx de la page web.
#Je conseil de l'ouvrir avec NotePad++ qui permet d'avoir les liens clickables.
write.csv2(liens_csv, file="C:/Users/lebriat/Downloads/liens_csv_page_web", row.names = FALSE)
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
#Telecharger un x nombre de fichier
for(i in 9:11){
#On telecharge les fichiers csv en les nommant diff?rement
download.file(liens_csv[i,], destfile = paste('elections_legislatives',i,'.csv',sep=''))
}
shiny::runApp()
